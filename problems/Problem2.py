# -*- coding: utf-8 -*-
# Problem2.py>
"""
Each new term in the Fibonacci sequence is generated by adding the previous two
terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.
"""

"""
The sum of the first n Fibonacci numbers is F(n+2)-1. Additionally, every third
Fibonacci number is even, and is by definition the sum of the previous two.
This means that the sum of the even Fibonacci numbers up to F(n) will be half
the sum of the first k Fibonacci numbers where F(k) is the largest Fibonnaci
less than or equal to F(n).
"""
import time
start_time = time.time()

from math import floor
from functions.sequences import get_fibonacci

limit = 4e6
Fn, n = get_fibonacci(limit=limit)
k = 3 * floor(n / 3)
answer = int((get_fibonacci(k + 2) - 1) / 2)

total_time = time.time()-start_time
print("The answer is {}.\nCalculation took {}ms.".format(answer, total_time))